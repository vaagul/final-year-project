import argparse
import random
from PIL import Image
import subprocess
from os import listdir
from os.path import isfile, join

from keras.models import model_from_json

from spacy.lang.en import English
import numpy as np
import scipy.io
from sklearn.externals import joblib

from features import get_questions_tensor_timeseries, get_images_matrix, get_answers_matrix, get_questions_matrix_sum

def main():
	
	image_dir = '../../vqa_images/'
	local_images = [ f for f in listdir(image_dir) if isfile(join(image_dir,f)) ]	
	
	parser = argparse.ArgumentParser()
	parser.add_argument('-model', type=str, default='../models/mlp_num_hidden_units_1024_num_hidden_layers_3.json')
	parser.add_argument('-weights', type=str, default='../models/mlp_num_hidden_units_1024_num_hidden_layers_3_epoch_70.hdf5')
	parser.add_argument('-sample_size', type=int, default=1)
	args = parser.parse_args()
	
	model = model_from_json(open(args.model).read())
	model.load_weights(args.weights)
	model.compile(loss='categorical_crossentropy', optimizer='rmsprop')
	print 'Model loaded and compiled'
	images_val = open('../data/preprocessed/images_val2014_all.txt', 
						'r').read().decode('utf8').splitlines()

	nlp = English()
	print 'Loaded word2vec features'
	labelencoder = joblib.load('../models/labelencoder.pkl')

	vgg_model_path = '../features/coco/vgg_feats.mat'
	features_struct = scipy.io.loadmat(vgg_model_path)
	VGGfeatures = features_struct['feats']
	print 'Loaded vgg features'
	image_ids = open('../features/coco_vgg_IDMap.txt').read().splitlines()
	img_map = {}
	for ids in image_ids:
		id_split = ids.split()
		img_map[id_split[0]] = int(id_split[1])

	image_sample = random.sample(local_images, args.sample_size)

	for image in image_sample:

		img = Image.open(image_dir + image)
		#print (image)
		img.show()
		q1 = raw_input("Enter the question:")
		q=unicode(q1)
		if "COCO" not in image:
			print "yes"
		else:
		
		coco_id = str(int(image[-16:-4]))
		
		
			X_q = get_questions_matrix_sum([q], nlp,coco_id,str(q1))
			X_i = get_images_matrix([coco_id], img_map, VGGfeatures)
			X_batch = np.hstack((X_q, X_i))
			y_predict = model.predict_classes(X_batch, verbose=0)
#		print labelencoder.inverse_transform(y_predict)
		#img.close()
			raw_input('Press enter to continue...')
		#p.kill()

if __name__ == "__main__":
	main()
